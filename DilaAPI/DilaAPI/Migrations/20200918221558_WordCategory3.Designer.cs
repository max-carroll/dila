// <auto-generated />
using DilaRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DilaAPI.Migrations
{
    [DbContext(typeof(DilaDbContext))]
    [Migration("20200918221558_WordCategory3")]
    partial class WordCategory3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Emoji")
                        .HasColumnName("emoji")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnName("language")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Translation")
                        .HasColumnName("translation")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_word");

                    b.ToTable("word");
                });

            modelBuilder.Entity("Entities.WordCategory", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnName("wordid")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnName("categoryid")
                        .HasColumnType("integer");

                    b.HasKey("WordId", "CategoryId")
                        .HasName("pk_wordcategory");

                    b.HasIndex("CategoryId")
                        .HasName("ix_wordcategory_categoryid");

                    b.ToTable("wordcategory");
                });

            modelBuilder.Entity("Entities.WordCategory", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_wordcategory_category_categoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Word", "Word")
                        .WithMany("WordCategories")
                        .HasForeignKey("WordId")
                        .HasConstraintName("fk_wordcategory_word_wordid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
